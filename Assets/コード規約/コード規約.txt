【コード規約】
Written by Yuki Uzawa 2020.08.26


▼Scriptsフォルダ内の大まかな仕分けについて
以下のルールで仕分ける
見づらい状況を回避するため、さらにディレクトリを内包させて細分化する

〇ObjectForGame
ゲームの管理進行に係るクラスや、インゲームに係るオブジェクト

〇Utility
単純かつ単体の機能を有するクラスや、システム的に使用するクラス


▼変数の命名規則
基本的には以下の命名規則を使用

〇クラス内メンバ変数(コード上で変更するもの)
アンダースコアの後、アッパーキャメルケースで命名
例：bool _IsActive;

〇クラス内メンバ変数(Untyのエディタ上でのみ変更するものでほぼconst扱いの変数)
アンダースコア無しのアッパーキャメルケースで命名
例：AnimationCurve FirstMoveCurve;

〇メソッド内ローカル変数
ローワーキャメルケースで命名
例：float startTime;


▼MonoBehaviourのライフサイクルに関して
以下の処理は原則使用しない

〇Awake()
Start()があるため、こちらを使用する
他のオブジェクトとライフサイクルを統一する目的

〇FixedUpdate()
処理負荷軽減のためFixedUpdate()は原則使用しない
FixedUpdate()でなければ対処できないものは例外


▼Prefabに関して
UI以外の複数生成されるオブジェクトは基本的にプレハブ化し、
一括インスタンス化した後にプールして利用する


▼GetComponentについて
負荷が高いので、特にUpdate内で呼ぶことを禁ずる
一度しか呼ばないStartや、それに近しい処理でのみ呼ぶこと


▼GameObject.Findについて
負荷が高いので、使用禁止
そもそもUnityに最適化したコーディングを行えていれば、使用する必要が皆無
対策として、SerializeFieldを使用して最初からリンクしておくか、
プレハブをインスタンス化した際にGetComponentで保持しておく


